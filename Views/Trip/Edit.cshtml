@model Transport_system_prototype.Models.Trip

@{
    ViewData["Title"] = "Edit Trip";
}

<div class="dashboard-container">
    <div class="dashboard-header">
        <div class="header-content">
            <h1 class="dashboard-title">Edit Trip</h1>
            <p class="dashboard-subtitle">Modify trip #@Model.Id details</p>
        </div>
        <div class="header-actions">
            <a href="@Url.Action("Index", "Trip")" class="btn-secondary">
                <i class="fas fa-arrow-left me-2"></i> Back to Trips
            </a>
        </div>
    </div>

    <div class="content-card">
        <div class="card-header">
            <div class="header-left">
                <h2 class="card-title"><i class="fas fa-edit me-2"></i>Trip Details</h2>
            </div>
            <div class="header-right">
                <span class="trip-status @(Model.TripDate > DateTime.Now ? "status-upcoming" : "status-past")">
                    <i class="fas @(Model.TripDate > DateTime.Now ? "fa-clock" : "fa-check-circle")"></i>
                    @(Model.TripDate > DateTime.Now ? "Upcoming" : "Completed")
                </span>
            </div>
        </div>

        <form id="editTripForm" method="post" action="@Url.Action("Edit", "Trip", new { id = Model.Id })">
            @Html.AntiForgeryToken()
            <input type="hidden" name="Id" value="@Model.Id" />

            <div class="form-container">
                <div class="form-section">
                    <h3 class="section-title">Vehicle Information</h3>
                    <div class="form-group">
                        <label for="VehicleId" class="form-label">Select Vehicle <span class="required">*</span></label>
                        <div class="select-container">
                            <select id="VehicleId" name="VehicleId" class="form-select" required>
                                @foreach (var vehicle in ViewBag.Vehicles ?? new List<Vehicle>())
                                {
                                    if (Model.vehicleId == vehicle.Id)
                                    {
                                        <option value="@vehicle.Id" data-type="@vehicle.Type" selected>
                                            @(vehicle.Type != null ? $"{vehicle.Type}: " : "")@vehicle.Name
                                        </option>
                                    }
                                    else
                                    {
                                        <option value="@vehicle.Id" data-type="@vehicle.Type">
                                            @(vehicle.Type != null ? $"{vehicle.Type}: " : "")@vehicle.Name
                                        </option>
                                    }
                                }
                            </select>
                            <div class="select-icon vehicle-icon">
                                <i class="fas @(Model.vehicle?.Type == "Train" ? "fa-train" : "fa-bus")"></i>
                            </div>
                        </div>
                        <div class="form-text">Choose the vehicle that will operate this trip</div>
                        <span class="field-validation-valid text-danger" data-valmsg-for="VehicleId" data-valmsg-replace="true"></span>
                    </div>
                </div>

                <div class="form-divider"></div>

                <div class="form-section">
                    <h3 class="section-title">Route Information</h3>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="FromStationId" class="form-label">From Station <span class="required">*</span></label>
                            <div class="select-container">
                                <select id="FromStationId" name="FromStationId" class="form-select" required>
                                    @foreach (var station in ViewBag.Stations ?? new List<object>())
                                    {
                                        if (Model.FromStationId == station.Id)
                                        {
                                            <option value="@station.Id" selected>@station.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@station.Id"> @station.Name</option>
                                        }
                                    }
                                </select>
                                <div class="select-icon origin-icon">
                                    <i class="fas fa-map-marker-alt"></i>
                                </div>
                            </div>
                            <div class="form-text">Departure station for this trip</div>
                            <span class="field-validation-valid text-danger" data-valmsg-for="FromStationId" data-valmsg-replace="true"></span>
                        </div>

                        <div class="form-group">
                            <label for="TOStationId" class="form-label">To Station <span class="required">*</span></label>
                            <div class="select-container">
                                <select id="TOStationId" name="TOStationId" class="form-select" required>
                                    @foreach (var station in ViewBag.Stations ?? new List<object>())
                                    {
                                        if (Model.TOStationId == station.Id)
                                        {
                                            <option value="@station.Id" selected>@station.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@station.Id"> @station.Name</option>
                                        }
                                    }
                                </select>
                                <div class="select-icon destination-icon">
                                    <i class="fas fa-map-marker-alt"></i>
                                </div>
                            </div>
                            <div class="form-text">Destination station for this trip</div>
                            <span class="field-validation-valid text-danger" data-valmsg-for="TOStationId" data-valmsg-replace="true"></span>
                        </div>
                    </div>

                    <div class="route-visualization">
                        <div class="route-station origin">
                            <div class="station-icon">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <div class="station-name" id="originDisplay">@(Model.FromStation?.Name ?? "Select departure station")</div>
                        </div>
                        <div class="route-path">
                            <div class="route-line" style="width: 100%;"></div>
                            <div class="route-vehicle" id="routeVehicle" style="left: 50%;">
                                <i class="fas @(Model.vehicle?.Type == "Train" ? "fa-train" : "fa-bus")"></i>
                            </div>
                        </div>
                        <div class="route-station destination">
                            <div class="station-icon">
                                <i class="fas fa-map-marker-alt"></i>
                            </div>
                            <div class="station-name" id="destinationDisplay">@(Model.TOStation?.Name ?? "Select destination station")</div>
                        </div>
                    </div>
                </div>

                <div class="form-divider"></div>

                <!-- Trip Details Section -->
                <div class="form-section">
                    <h3 class="section-title">Trip Details</h3>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="Price" class="form-label">Price <span class="required">*</span></label>
                            <div class="input-container">
                                <input type="number" id="Price" name="Price" class="form-input" required min="1" value="@Model.Price">
                                <div class="input-icon">
                                    <i class="fas fa-dollar-sign"></i>
                                </div>
                            </div>
                            <div class="form-text">Ticket price for this trip</div>
                            <span class="field-validation-valid text-danger" data-valmsg-for="Price" data-valmsg-replace="true"></span>
                        </div>

                        <div class="form-group">
                            <label for="NumberOfSeats" class="form-label">Number of Seats <span class="required">*</span></label>
                            <div class="input-container">
                                <input type="number" id="NumberOfSeats" name="NumberOfSeats" class="form-input" required min="1" value="@Model.NumberOfSeats">
                                <div class="input-icon">
                                    <i class="fas fa-chair"></i>
                                </div>
                            </div>
                            <div class="form-text">Total number of seats available on the vehicle</div>
                            <span class="field-validation-valid text-danger" data-valmsg-for="NumberOfSeats" data-valmsg-replace="true"></span>
                        </div>

                        <div class="form-group">
                            <label for="AvailableSeats" class="form-label">Available Seats <span class="required">*</span></label>
                            <div class="input-container">
                                <input type="number" id="AvailableSeats" name="AvailableSeats" class="form-input" required min="0" value="@Model.AvailableSeats">
                                <div class="input-icon">
                                    <i class="fas fa-users"></i>
                                </div>
                            </div>
                            <div class="form-text">Number of seats currently available for booking</div>
                            <span class="field-validation-valid text-danger" data-valmsg-for="AvailableSeats" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>

                <div class="form-divider"></div>

                <div class="form-section">
                    <h3 class="section-title">Schedule Information</h3>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="TripDate" class="form-label">Trip Date <span class="required">*</span></label>
                            <div class="input-container">
                                <input type="date" id="TripDate" name="TripDate" class="form-input" required value="@Model.TripDate.ToString("yyyy-MM-dd")">
                                <div class="input-icon">
                                    <i class="fas fa-calendar-alt"></i>
                                </div>
                            </div>
                            <div class="form-text">The date when this trip will occur</div>
                            <span class="field-validation-valid text-danger" data-valmsg-for="TripDate" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>

                <div class="form-divider"></div>
            </div>

            <div class="form-actions">
                <div class="action-left">
                    <button type="button" class="btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                        <i class="fas fa-trash-alt me-2"></i> Delete Trip
                    </button>
                </div>
                <div class="action-right">
                    <button type="button" class="btn-cancel" onclick="location.href='@Url.Action("Index", "Trip")'">
                        Cancel
                    </button>
                    <button type="submit" class="btn-submit" id="submitButton">
                        <i class="fas fa-check-circle me-2"></i> Update Trip
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Validation Error Modal -->
<div class="modal fade" id="validationModal" tabindex="-1" aria-labelledby="validationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="validationModalLabel">Form Validation Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="validation-warning">
                    <div class="warning-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="warning-content">
                        <h4>Please check your form</h4>
                        <p>The following errors were found:</p>
                        <ul id="validationErrors" class="validation-list">
                            <!-- Errors will be inserted here -->
                        </ul>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-primary" data-bs-dismiss="modal">
                    <i class="fas fa-check me-1"></i> OK
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="delete-warning">
                    <div class="warning-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="warning-content">
                        <h4>Are you sure?</h4>
                        <p>You are about to delete this trip:</p>
                        <p class="trip-info">Trip #@Model.Id: @(Model.FromStation?.Name ?? "Unknown") to @(Model.TOStation?.Name ?? "Unknown")</p>
                        <p class="warning-text">This action cannot be undone and all data associated with this trip will be permanently removed.</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-cancel" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" action="@Url.Action("Delete", "Trip", new { id = Model.Id })">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="_method" value="DELETE" />
                    <button type="submit" class="btn-confirm-delete">
                        <i class="fas fa-trash-alt me-1"></i> Delete Trip
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    /* Modern Color Palette */
    :root {
        --primary: #4361ee;
        --primary-light: #4895ef;
        --primary-dark: #3f37c9;
        --primary-soft: rgba(67, 97, 238, 0.1);
        --secondary: #6c757d;
        --secondary-soft: rgba(108, 117, 125, 0.1);
        --success: #4CAF50;
        --success-soft: rgba(76, 175, 80, 0.1);
        --info: #3abff8;
        --info-soft: rgba(58, 191, 248, 0.1);
        --warning: #f59e0b;
        --warning-soft: rgba(245, 158, 11, 0.1);
        --danger: #ef4444;
        --danger-soft: rgba(239, 68, 68, 0.1);
        --light: #f8f9fa;
        --dark: #212529;
        --background: #f9fafb;
        --card-bg: #ffffff;
        --border-color: #e5e7eb;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --text-muted: #94a3b8;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    /* Base Styles */
    body {
        background-color: var(--background);
        color: var(--text-primary);
        font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .dashboard-container {
        padding: 1.5rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    /* Dashboard Header */
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .dashboard-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: var(--text-primary);
        margin: 0;
    }

    .dashboard-subtitle {
        color: var(--text-secondary);
        margin: 0.25rem 0 0 0;
        font-size: 0.95rem;
    }

    .btn-secondary {
        background-color: var(--light);
        color: var(--text-secondary);
        border: 1px solid var(--border-color);
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        transition: all 0.3s ease;
        text-decoration: none;
    }

        .btn-secondary:hover {
            background-color: var(--secondary-soft);
            color: var(--secondary);
            transform: translateY(-2px);
            box-shadow: var(--shadow);
        }

    /* Content Card */
    .content-card {
        background-color: var(--card-bg);
        border-radius: 1rem;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
        overflow: hidden;
        margin-bottom: 2rem;
    }

    .card-header {
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--card-bg);
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0;
        color: var(--text-primary);
    }

    .trip-status {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-weight: 500;
        font-size: 0.875rem;
    }

    .status-upcoming {
        background-color: var(--primary-soft);
        color: var(--primary);
    }

    .status-past {
        background-color: var(--success-soft);
        color: var(--success);
    }

    .trip-status i {
        margin-right: 0.5rem;
    }

    /* Form Styles */
    .form-container {
        padding: 1.5rem;
    }

    .form-section {
        margin-bottom: 1.5rem;
    }

    .section-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0 0 1.25rem 0;
        display: flex;
        align-items: center;
    }

    .form-divider {
        height: 1px;
        background-color: var(--border-color);
        margin: 2rem 0;
    }

    .form-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--text-primary);
    }

    .required {
        color: var(--danger);
        margin-left: 0.25rem;
    }

    .select-container, .input-container {
        position: relative;
    }

    .form-select, .form-input, .form-textarea {
        width: 100%;
        padding: 0.75rem 1rem;
        padding-right: 2.5rem;
        border-radius: 0.5rem;
        border: 1px solid var(--border-color);
        background-color: var(--light);
        color: var(--text-primary);
        transition: all 0.2s ease;
        font-size: 0.95rem;
    }

    .form-textarea {
        padding-right: 1rem;
        resize: vertical;
        min-height: 100px;
    }

        .form-select:focus, .form-input:focus, .form-textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-soft);
        }

    .select-icon, .input-icon {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-muted);
        pointer-events: none;
    }

    .origin-icon {
        color: var(--success);
    }

    .destination-icon {
        color: var(--info);
    }

    .form-text {
        font-size: 0.875rem;
        color: var(--text-secondary);
        margin-top: 0.5rem;
    }

    /* Route Visualization */
    .route-visualization {
        display: flex;
        align-items: center;
        margin: 2rem 0;
        padding: 1.5rem;
        background-color: var(--light);
        border-radius: 0.75rem;
    }

    .route-station {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        width: 150px;
    }

    .station-icon {
        width: 3rem;
        height: 3rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        margin-bottom: 0.75rem;
    }

    .origin .station-icon {
        background-color: var(--success-soft);
        color: var(--success);
    }

    .destination .station-icon {
        background-color: var(--info-soft);
        color: var(--info);
    }

    .station-name {
        font-weight: 500;
        color: var(--text-primary);
    }

    .route-path {
        flex: 1;
        position: relative;
        height: 4px;
        background-color: var(--border-color);
        margin: 0 1rem;
    }

    .route-line {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 0%;
        background-color: var(--primary);
        transition: width 0.5s ease;
    }

    .route-vehicle {
        position: absolute;
        top: 50%;
        left: 0%;
        transform: translate(-50%, -50%);
        width: 2.5rem;
        height: 2.5rem;
        background-color: var(--primary);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1rem;
        transition: left 0.5s ease;
    }

    /* History Timeline */
    .history-timeline {
        position: relative;
        padding-left: 2rem;
        margin-top: 1.5rem;
    }

        .history-timeline:before {
            content: '';
            position: absolute;
            left: 0.75rem;
            top: 0;
            bottom: 0;
            width: 2px;
            background-color: var(--border-color);
        }

    .timeline-item {
        position: relative;
        padding-bottom: 1.5rem;
    }

        .timeline-item:last-child {
            padding-bottom: 0;
        }

    .timeline-icon {
        position: absolute;
        left: -2rem;
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        background-color: var(--primary-soft);
        color: var(--primary);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.875rem;
        z-index: 1;
    }

    .timeline-content {
        background-color: var(--light);
        border-radius: 0.5rem;
        padding: 1rem;
    }

        .timeline-content h4 {
            margin: 0 0 0.5rem 0;
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
        }

    .timeline-date {
        color: var(--text-secondary);
        font-size: 0.875rem;
        margin: 0 0 0.5rem 0;
    }

    .timeline-content p:last-child {
        margin-bottom: 0;
    }

    /* Form Actions */
    .form-actions {
        padding: 1.5rem;
        border-top: 1px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .action-right {
        display: flex;
        gap: 1rem;
    }

    .btn-cancel {
        background-color: var(--light);
        border: 1px solid var(--border-color);
        color: var(--text-secondary);
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 500;
        transition: all 0.2s ease;
        cursor: pointer;
    }

        .btn-cancel:hover {
            background-color: var(--secondary-soft);
        }

    .btn-submit {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        transition: all 0.3s ease;
        cursor: pointer;
    }

        .btn-submit:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
            background: linear-gradient(135deg, var(--primary-light), var(--primary));
        }

    .btn-danger {
        background-color: var(--danger-soft);
        color: var(--danger);
        border: 1px solid var(--danger-soft);
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        transition: all 0.2s ease;
        cursor: pointer;
    }

        .btn-danger:hover {
            background-color: var(--danger);
            color: white;
        }

    /* Validation Modal */
    .validation-warning {
        display: flex;
        gap: 1.5rem;
        align-items: flex-start;
    }

    .warning-icon {
        width: 3rem;
        height: 3rem;
        background-color: var(--danger-soft);
        color: var(--danger);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .warning-content h4 {
        margin: 0 0 1rem 0;
        color: var(--text-primary);
        font-weight: 600;
    }

    .warning-content p {
        margin: 0 0 0.5rem 0;
        color: var(--text-secondary);
    }

    .validation-list {
        background-color: var(--light);
        border-radius: 0.5rem;
        padding: 1rem 1rem 1rem 2.5rem;
        margin: 0.5rem 0 0 0;
        color: var(--danger);
    }

        .validation-list li {
            margin-bottom: 0.5rem;
        }

            .validation-list li:last-child {
                margin-bottom: 0;
            }

    .btn-primary {
        background-color: var(--primary);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        transition: all 0.2s ease;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

    /* Delete Modal */
    .delete-warning {
        display: flex;
        gap: 1.5rem;
        align-items: flex-start;
    }

    .trip-info {
        font-weight: 600;
        color: var(--text-primary);
        background-color: var(--light);
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0 1rem 0;
    }

    .warning-text {
        color: var(--danger);
        font-size: 0.875rem;
    }

    .btn-confirm-delete {
        background-color: var(--danger);
        color: white;
        border: none;
        padding: 0.75rem 1.25rem;
        border-radius: 0.5rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        transition: all 0.2s ease;
        cursor: pointer;
    }

        .btn-confirm-delete:hover {
            background-color: #d32f2f;
        }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Form validation
            $("#editTripForm").on("submit", function (e) {
                var isValid = true;
                var errors = [];

                // Clear previous validation
                $(".text-danger").text("");
                // Validate Vehicle
                if (!$("#VehicleId").val()) {
                    isValid = false;
                    errors.push("Please select a vehicle");
                    $("[data-valmsg-for='VehicleId']").text("The Vehicle field is required.");
                }

                // Validate From Station
                if (!$("#FromStationId").val()) {
                    isValid = false;
                    errors.push("Please select a departure station");
                    $("[data-valmsg-for='FromStationId']").text("The From Station field is required.");
                }

                // Validate To Station
                if (!$("#TOStationId").val()) {
                    isValid = false;
                    errors.push("Please select a destination station");
                    $("[data-valmsg-for='TOStationId']").text("The To Station field is required.");
                }

                // Validate stations are different
                if ($("#FromStationId").val() && $("#TOStationId").val() &&
                    $("#FromStationId").val() === $("#TOStationId").val()) {
                    isValid = false;
                    errors.push("Departure and destination stations cannot be the same");
                    $("[data-valmsg-for='TOStationId']").text("Departure and destination stations must be different.");
                }

                // Validate Price
                if (!$("#Price").val()) {
                    isValid = false;
                    errors.push("Please enter a price");
                    $("[data-valmsg-for='Price']").text("The Price field is required.");
                } else if (parseInt($("#Price").val()) < 1) {
                    isValid = false;
                    errors.push("Price must be greater than zero");
                    $("[data-valmsg-for='Price']").text("Price must be greater than zero.");
                }

                // Validate Number of Seats
                if (!$("#NumberOfSeats").val()) {
                    isValid = false;
                    errors.push("Please enter the number of seats");
                    $("[data-valmsg-for='NumberOfSeats']").text("The Number of Seats field is required.");
                } else if (parseInt($("#NumberOfSeats").val()) < 1) {
                    isValid = false;
                    errors.push("Number of seats must be at least 1");
                    $("[data-valmsg-for='NumberOfSeats']").text("Number of seats must be at least 1.");
                }

                // Validate Available Seats
                if (!$("#AvailableSeats").val()) {
                    isValid = false;
                    errors.push("Please enter the available seats");
                    $("[data-valmsg-for='AvailableSeats']").text("The Available Seats field is required.");
                } else if (parseInt($("#AvailableSeats").val()) < 0) {
                    isValid = false;
                    errors.push("Available seats cannot be negative");
                    $("[data-valmsg-for='AvailableSeats']").text("Available seats cannot be negative.");
                } else if ($("#NumberOfSeats").val() && parseInt($("#AvailableSeats").val()) > parseInt($("#NumberOfSeats").val())) {
                    isValid = false;
                    errors.push("Available seats cannot exceed total number of seats");
                    $("[data-valmsg-for='AvailableSeats']").text("Available seats cannot exceed total number of seats.");
                }

                // Validate Trip Date
                if (!$("#TripDate").val()) {
                    isValid = false;
                    errors.push("Please select a trip date");
                    $("[data-valmsg-for='TripDate']").text("The Trip Date field is required.");
                }
                // If validation fails, show modal
                if (!isValid) {
                    e.preventDefault();

                    // Populate errors in modal
                    var errorList = $("#validationErrors");
                    errorList.empty();

                    errors.forEach(function(error) {
                        errorList.append("<li>" + error + "</li>");
                    });

                    // Show modal
                    var validationModal = new bootstrap.Modal(document.getElementById('validationModal'));
                    validationModal.show();

                    return false;
                }

                // If validation passes, combine date and time
                if (isValid) {
                    var tripDate = $("#TripDate").val();
                    var tripTime = $("#TripTime").val();

                    // Create a hidden input for the combined datetime
                    if (tripTime) {
                        $("<input>")
                            .attr("type", "hidden")
                            .attr("name", "TripDate")
                            .val(tripDate + "T" + tripTime + ":00")
                            .appendTo("#editTripForm");
                    }
                }

                return isValid;
            });

            // Update route visualization
            function updateRouteVisualization() {
                var fromStation = $("#FromStationId option:selected").text();
                var toStation = $("#TOStationId option:selected").text();

                if (fromStation && fromStation !== "-- Select Departure Station --") {
                    $("#originDisplay").text(fromStation);
                } else {
                    $("#originDisplay").text("Select departure station");
                }

                if (toStation && toStation !== "-- Select Destination Station --") {
                    $("#destinationDisplay").text(toStation);
                } else {
                    $("#destinationDisplay").text("Select destination station");
                }

                // Animate route line and vehicle if both stations are selected
                if (fromStation && toStation &&
                    fromStation !== "-- Select Departure Station --" &&
                    toStation !== "-- Select Destination Station --") {

                    $(".route-line").css("width", "100%");
                    $(".route-vehicle").css("left", "50%");
                } else {
                    $(".route-line").css("width", "0%");
                    $(".route-vehicle").css("left", "0%");
                }
            }

            // Update visualization when stations change
            $("#FromStationId, #TOStationId").on("change", function() {
                updateRouteVisualization();
            });

            // Filter vehicles based on selected vehicle type
            $("#Type").on("change", function() {
                var selectedType = $(this).val();
                var vehicleSelect = $("#VehicleId");
                
                // Reset vehicle selection
                vehicleSelect.val("");
                
                // Show/hide options based on vehicle type
                $("#VehicleId option").each(function() {
                    if ($(this).val() === "") {
                        // Always show the placeholder option
                        $(this).show();
                    } else if (!selectedType || $(this).data("type") === selectedType) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
                
                // Update vehicle icon
                updateVehicleIcon(selectedType);
            });
            
            // Update vehicle icon in route visualization
            $("#VehicleId").on("change", function() {
                var selectedOption = $("#VehicleId option:selected");
                var Type = selectedOption.data("type");
                
                if (Type) {
                    updateVehicleIcon(Type);
                    
                    // Auto-populate number of seats from selected vehicle if needed
                    var seats = selectedOption.data("seats");
                    if (seats && !$("#NumberOfSeats").val()) {
                        $("#NumberOfSeats").val(seats);
                        $("#AvailableSeats").val(seats);
                    }
                }
            });
            
            // Function to update vehicle icon
            function updateVehicleIcon(type) {
                var vehicleIcon = $(".vehicle-icon i");
                var routeVehicle = $("#routeVehicle i");
                
                if (type === "Train") {
                    vehicleIcon.removeClass("fas fa-bus").addClass("fas fa-train");
                    routeVehicle.removeClass("fas fa-bus").addClass("fas fa-train");
                } else {
                    vehicleIcon.removeClass("fas fa-train").addClass("fas fa-bus");
                    routeVehicle.removeClass("fas fa-train").addClass("fas fa-bus");
                }
            }

            // Initialize tooltips if any
            if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl)
                });
            }
        });
    </script>
}